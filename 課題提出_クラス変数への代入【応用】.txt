〇static変数の使い所：すべてのインスタンスで共通する変数を作りたいとき
全インスタンスで共通する変数を宣言することができるので、複数のインスタンスをまたがる変数を定義する際にstatic変数を使用する。
個別のインスタンス内で変数を定義すると、コンストラクタを呼び出しインスタンス生成するたびに値が初期値になり、その初期値から処理ごとに変動する。
例えば全インスタンスの個数を計算したい場合などには、インスタンス内にカウンタ用の変数を置いてしまうと都度初期値から1カウントとなり、インスタンスが個別に値を持ってしまう。
その際に、static変数を使用しインスタンス外に変数を宣言することで、全インスタンスのカウントを共通の変数で一連に行うことができる。
staticを指定した変数はオブジェクトを生成しなくても利用ができる。呼び出す際にはクラス名.変数名と記述する。

〇staticメソッドの使い所：
１．すべてのインスタンスで共通するメソッドを作りたいとき
static変数と共通の使い所を持つ。すべてのインスタンスにまたがるメソッドを設定することができる。
呼び出す際にはクラス名.メソッド名と記述する。
２．クラスの関連する便利なメソッドをまとめたいとき
クラスの情報をオブジェクトなしで呼び出したい、あるいは複数のメソッドをまとめたい場合にstaticメソッドが使用される。
例えば、Integerというstaticクラスが提供されているが、その中にはtoStringやparseInt等のメソッドが内包されており、それらを呼び出して使用することができる。
この例では、int型の値を扱う際に役立つメソッドや、int型をString型に変換、またはその逆を行うメソッドがIntegerクラスにまとめられている。

〇修飾子public、private、protectedのそれぞれの機能的な違い、使いどころ：カプセル化
１．public
あらゆる場面（同じパッケージ内ではない場合、あるいはクラスやサブクラスが異なる場合でも）で利用することができる。
カプセル化の考え方では内部データを隠蔽し、外側の機能のみ公開する。その外側部分にあたるメソッドやクラスを公開するためにするためにpublicでクラスやメソッドを作成する際に、主に使用される。
２．protected
同じパッケージ内、あるいは同じクラスやサブクラス内でのみ利用することができる。
３．private
同じクラス内でのみ利用することができる。
カプセル化の考え方で、内部データを隠蔽するためにprivateで変数を定義する際に、主に使用される。privateで変数を定義することで、変数が外部から直接的に編集されることを防ぐことができる。
※アクセス修飾子を指定しない場合は、同じパッケージ内または同じクラスの場合のみ利用できる設定となる。

【カプセル化のメリット】
★代入前処理
メンバ変数を設定する際に変数を直接変更せずメソッドを介するため、代入前にメソッドを使用して正しい値が代入されようとしているかを確認することができる。
★プログラムの修正範囲が狭まる
例えば、メンバ変数に変更があった場合に、メンバ変数が外から直接参照参照されることがないため、修正範囲をクラス内にとどめることができる。